
services:
  - docker:dind

build-api-service-image:
  stage: build
  image: docker:git
  variables:
    GITLAB_IMAGE: ${CI_REGISTRY_IMAGE}/api_image
  before_script:
    # $CI_JOB_TOKEN is variable automatically added by Gitlab: see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
  script:
    - docker build --tag $GITLAB_IMAGE:latest api
    - docker push $GITLAB_IMAGE:latest
  only:
    - main

stages:
  - test
  - build
  - deploy

# Run flake8 to check for code quality
lint-test-job:
  image: python:3-bullseye
  stage: test
  script:
    - pip install flake8
    - flake8 api
#
# Run the unit tests
api-unit-tests-job:
  image: python:3-bullseye
  stage: test
  needs:
    - lint-test-job
  variables:
    DATABASE_URL: ${DATABASE_URL}
    SIGNING_KEY: ${SIGNING_KEY}
  script:
    - cd api
    - pip install pytest
    - pip install fastapi[all]
    - pip install jwtdown_fastapi
    - uvicorn
    - psycopg[binary,pool]
    - pip install psycopg2
    # - pip install -r requirements.txt
    - python -m pytest

# Build the React/JavaScript front-end
build-front-end-job:
  stage: build
  image: node:lts-bullseye
  needs:
    - lint-test-job
  variables:
    # If either of these variables is defined in the GitLab
    # CI/CD variables, that value will override the value here.
    # You need to substitute in your real values for
    # GROUP_NAME, PROJECT_NAME, & WEBSERVICE_NAME below.
    PUBLIC_URL: https://blacksmith-collaborative.gitlab.io/friendforge
    REACT_APP_API_HOST: https://feb-23-pt-2-api-friendforge.mod3projects.com
  script:
    - cd ghi
    - npm install
    - npm run build
    - cp build/index.html build/404.html
  artifacts:
    paths:
      - ghi/build/

# Deploy the React/JavaScript front-end to GitLab pages
pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - build-front-end-job
  needs:
    - build-front-end-job
  script:
    - mv ghi/build/ public
  artifacts:
    paths:
      - public

# # Build Sample Service:
# build-back-end-job:
#   image: docker:20-dind
#   stage: build
#   services:
#     - docker:20-dind
#   before_script:
#     - export DOCKER_REGISTRY_USER=$CI_REGISTRY_USER # built-in GitLab Registry User
#     - export DOCKER_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD # built-in GitLab Registry Password
#     - export DOCKER_REGISTRY_URL=$CI_REGISTRY # built-in GitLab Registry URL
#     - export COMMIT_HASH=$CI_COMMIT_SHA # Your current commit sha
#     - export IMAGE_NAME_WITH_REGISTRY_PREFIX=$CI_REGISTRY_IMAGE # Your repository prefixed with GitLab Registry URL
#     - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" $DOCKER_REGISTRY_URL # Instructs GitLab to login to its registry
#   script:
#     - cd sample_service
#     - echo "Building... " # MAKE SURE NO SPACE ON EITHER SIDE OF = IN THE FOLLOWING LINE
#     - export CONTAINER_FULL_IMAGE_NAME_WITH_TAG=$IMAGE_NAME_WITH_REGISTRY_PREFIX/sample_service_image:$COMMIT_HASH
#     - docker build -f ./Dockerfile --pull -t built-sample_service .
#     - docker tag built-sample_service "$CONTAINER_FULL_IMAGE_NAME_WITH_TAG"
#     - docker push "$CONTAINER_FULL_IMAGE_NAME_WITH_TAG"
#     - echo $CONTAINER_FULL_IMAGE_NAME_WITH_TAG
#     - echo "Deploying on CapRover..."
#     - docker run caprover/cli-caprover caprover deploy --caproverUrl $CAPROVER_URL --caproverPassword $CAPROVER_PASSWORD --caproverApp $CAPROVER_APP --imageName $CONTAINER_FULL_IMAGE_NAME_WITH_TAG
#   only:
#     - main

#Testing